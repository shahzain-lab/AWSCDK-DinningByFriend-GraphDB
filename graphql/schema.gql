

type TReply {
    replies_Id: ID!
    text: String!
}

type TReview {
    reviews_Id: ID!
    review: String!
    replies: [Reply]
    like_Count: Float!
    dislike_Count: Float!
}

type TRecipeDetail {
    description: String
    ingrediants: String!
    tags: String!
}

type TRecipe { 
    recipe_ID: String!
    recipe_Name: String!
    recipe_details: RecipeDetail
    reviews: [Review]!
}

type TRestaurant {
    restaurant_Id: String!
    restaurant_Name: String!
    recipes: [Recipe]!
}

type TFriendOfFriend {
    friend_id: ID!,
    friend_Name: String!
}

type TFriend {
    id: ID!
    friend_Name: String!
    friends: [FriendOfFriend]!
}

type TUser {
    user_Id: ID!
    user_Name: String!
    user_email: String!
    restaurants: [Restaurant]!
    friends: [Friend]!
}

type TRecommendation {
    friends: [Friend]!
    restaurants: [Restaurant]!
}

input NewFriendInput { 
    id: ID!
    friend_Name: String!
}

input NewUserInput {
    user_Id: ID!
    user_Name: String!
    user_email: String!
}

input NewRestaurantInput {
    restaurant_Id: String!
    restaurant_Name: String!
}

input ReplyInput {
    replies_Id: ID!
    text: String
}

input ReviewInput {
    reviews_Id: ID!
    review: String!
}

input RecipeInput {
    recipe_ID: String!
    recipe_Name: String!
    recipe_details: RecipeDetail
}

type Query {
    recommendations: TRecommendation ## get recommended friends and their retaurants after signup
    get_user: TUser ## get user info
    get_friend(id: ID!): TFriend 
    get_recipe(id: ID!): TRecipe
    get_restaurant(id: ID!): TRestaurant
    get_friendOfFriend(friend_id: ID!): TFriendOfFriend ## get single friend of your friend
    get_review(id: String!): TReview ## get single review of a recipe
    all_freinds: [TFriend] 
    all_recipes(restaurant_Id: ID!): [TRecipe]! ## all recipes of your specific restaurant
    all_reviews(recipe_id: ID!): [TReview]! ## all reviews your specific recipes
    all_restaurants: [TRestaurant] ## all restaurant
    all_friendOfFreind(friend_id: ID!): [TFriendOfFriend]! ## list of your friend-of-friends
}

type Mutation {
    add_user(new_user: NewUserInput!): TUser! ## signin/signup
    add_friend(new_friend: NewFriendInput!): TFriend! ##  follow a friend
    add_restaurant(new_restaurant: NewRestaurantInput!): [TRestaurant]! ## add restaurant
    create_review(review: ReviewInput!): [TReview]! ## give review on specific recipe
    create_recipe(recipe: RecipeInput!): [TRecipe]! ## make a new recipe in your specific restaurant
}

